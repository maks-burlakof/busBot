import telebot
from telebot.types import Message
from envparse import Env
from logging import getLogger, config
from datetime import date

from clients.telegram_client import TelegramClient
from clients.sqlite3_client import SQLiteClient
from clients.routeby_client import SiteParser
from actioners import UserActioner

config.fileConfig(fname='logging_config.conf', disable_existing_loggers=False)
logger = getLogger(__name__)

env = Env()
TOKEN = env.str('TOKEN')
ADMIN_CHAT_ID = env.str('ADMIN_CHAT_ID')


class MyBot(telebot.TeleBot):
    def __init__(self, telegram_client: TelegramClient, user_actioner: UserActioner,
                 parser: SiteParser, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.telegram_client = telegram_client
        self.user_actioner = user_actioner
        self.parser = parser

    def setup_resources(self):
        self.user_actioner.setup()

    def shutdown_resources(self):
        self.user_actioner.shutdown()

    def shutdown(self):
        self.shutdown_resources()


telegram_client = TelegramClient(token=TOKEN, base_url="https://api.telegram.org")
user_actioner = UserActioner(SQLiteClient("users.db"))
parser = SiteParser()
bot = MyBot(token=TOKEN, telegram_client=telegram_client, user_actioner=user_actioner, parser=parser)


@bot.message_handler(commands=['start'])
def start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    chat_id = message.chat.id
    create_new_user = False

    user = bot.user_actioner.get_user(user_id=str(user_id))
    if not user:
        bot.user_actioner.create_user(user_id=str(user_id), username=username, chat_id=chat_id)
        create_new_user = True
    # TODO: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∞–∫–∂–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    bot.reply_to(message=message, text=f"–í—ã {'—É–∂–µ' if not create_new_user else '—É—Å–ø–µ—à–Ω–æ'} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {username}.\n"
                                       f"–í–∞—à user_id: {user_id}")
    logger.info(f'User @{username} called /start function')


@bot.message_handler(commands=["notify"])
def notify(message: Message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2023-01-13"')
    bot.register_next_step_handler(message, notify_set)


def notify_set(message: Message):
    notify_data = message.text.split(' ')
    bot.user_actioner.update_notify_data(user_id=str(message.from_user.id), updated_date=notify_data)
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Ä–µ–π—Å—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.')


@bot.message_handler(commands=["parse"])
def parse(message: Message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2023-01-13"')
    bot.register_next_step_handler(message, parse_response)


def parse_response(message: Message):
    city_from, city_to, departure_date = message.text.split(' ')
    response = bot.parser.parse(city_from, city_to, departure_date)
    if response:
        bot.send_message(message.chat.id, str(response))
    else:
        bot.send_message(message.chat.id, "–†–µ–π—Å–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@bot.message_handler(commands=["track"])
def track(message: Message):
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≥–æ—Ä–æ–¥ –ø—Ä–∏–±—ã—Ç–∏—è, '
                                      '–¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "2023-01-13" –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–π—Å–∞')
    bot.register_next_step_handler(message, track_set)


def track_set(message: Message):
    track_data = message.text.split(' ')
    bot.user_actioner.update_track_data(user_id=str(message.from_user.id), updated_date=track_data)
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –Ø –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç —Ä–µ–π—Å.')


@bot.message_handler(commands=["settings"])
def settings(message: Message):
    pass


@bot.message_handler(commands=["extra"])
def extra(message: Message):
    msg = "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"\
          "/description - –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞\n"\
          "/feedback - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
    if message.chat.id == int(ADMIN_CHAT_ID):
        msg+= "/announcement_text - –û–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n" \
              "/announcement_auto - –û–±—ä—è–≤–ª–µ–Ω–∏–µ (—Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    bot.send_message(message.chat.id, msg)


@bot.message_handler(commands=["description"])
def description(message: Message):
    bot.send_message(message.chat.id, '[–°–º–æ—Ç—Ä–µ—Ç—å README.md –Ω–∞ GitHub](https://github.com/'
                                      'maks-burlakof/bus_bot/blob/main/README.md)', parse_mode='Markdown')


@bot.message_handler(commands=["feedback"])
def feedback(message: Message):
    bot.reply_to(message, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:")
    bot.register_next_step_handler(message, feedback_speech)


def feedback_speech(message: Message):
    bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} "
                                    f"–æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}")
    bot.reply_to(message, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@bot.message_handler(commands=["announcement_text"])
def announcement_text(message: Message):
    if not is_admin(message):
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    bot.register_next_step_handler(message, announcement_text_speech)


def announcement_text_speech(message: Message):
    bot.reply_to(message, "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n–î–∞/–ù–µ—Ç")
    bot.register_next_step_handler(message, announcement_text_confirmation, message.text)


def announcement_text_confirmation(message: Message, ann_text: str):
    if message.text.title().strip() == "–î–∞":
        bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
        users = bot.user_actioner.get_all_users()
        for user in users:
            bot.send_message(user[1], "*üîî –û–±—ä—è–≤–ª–µ–Ω–∏–µ:*\n" + ann_text, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


@bot.message_handler(commands=["announcement_auto"])
def announcement_auto(message: Message):
    if not is_admin(message):
        return


def create_err_message(err: Exception) -> str:
    return f"{date.today()} ::: {err.__class__} ::: {err}"


def is_admin(message):
    if message.chat.id != int(ADMIN_CHAT_ID):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return False
    else:
        return True


while True:
    try:
        bot.setup_resources()
        bot.polling()
    except Exception as err:
        bot.telegram_client.post(method="sendMessage", params={"text": create_err_message(err),
                                                               "chat_id": ADMIN_CHAT_ID})
        logger.error(f"{err.__class__} - {err}")
        bot.shutdown()
